let
    type vector = { x : int, y : int }
    type data = { v : vector, to_add : int }
    type dataArray = array of data
    
    var d1 := data { v = vector { x = 0 , y = 0} , to_add = 1}
    var d2 := data { v = vector { x = 1 , y = 1} , to_add = 1}
    var d3 := data { v = vector { x = 2 , y = 2} , to_add = 0}
    var d4 := data { v = vector { x = 3 , y = 4} , to_add = 1}
    
    var l := dataArray [4] of nil
    var result := vector { x = 0 , y = 0}
    var testVar : int := 0
    var testVar2 : int := testVar
    var sizeOfString : int := size("Test")
    var testVarFois2 : int := testVar+testVar2
    var testVarCarre : int := testVar*testVar
    var testVarMoins := testVar-testVar
    var testLog := testVar & testVar
    var testLog2 := testVar | testVar
    var testEqual := testVar = testVar
    var testDiff := testVar <> testVar
    var testSup := testVar > testVar-1
    var testInf := testVar-1 < testVar

    function fibonacci ( generations : int ) : int =
    let
        function computation ( generations : int , previous : int , pprevious : int ) : int =
            if generations = 0 then
                previous
        else
            computation ( generations - 1 , previous + pprevious , previous )
    in
        if generations = 0 | generations = 1 then
            generations
        else
            computation ( generations - 2 , 1 , 0)
    end

    
    function add_vectors ( l : dataArray , size : int , result : vector ) =
        for i := 0 to size - 1 do
            if l[i].to_add then
            (
                result.x := result.x + l[i].v.x ;
                result.y := result.y + l[i].v.y
            )
    function return1 () : int =
        1
in
    l[0] := d1;
    l[1] := d2;
    l[2] := d3;
    l[3] := d4;

    while testVar < 1
    do
    testVar := testVar + 1;

    if testVar = 1
    then testVar :=2;

    if testVar = 2
    then testVar := 3
    else testVar := testVar*2;

    if testVar = 2 
    then 1
    else 0;

    testVar := -testVar;

    while 1
    do
    (
    print("coucou");
    break);


    for i := 0 to 10
    do 
        (
        print("coucou");
        break);
    
    add_vectors (l, 4, result) ;
    print(result.x) ;
    print(result .y);

    print ( fibonacci (12) )
end
