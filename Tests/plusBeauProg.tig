let
  type vector = { x : int, y : int, z : int }
  type tableau = array of int
  var v := vector { x = 2, y = 3, z = 5}
  var tab := tableau[3] of int
  var entreeUtilisateur : int := 0
  var resultat : int := 0
  var condition : int := 0
  var coucou : string := "Bonjour "

  function fibonacci ( generations : int ) : int =
  let
      function computation ( generations : int , previous : int , pprevious : int ) : int =
          if generations = 0 then
              previous
      else
          computation ( generations - 1 , previous + pprevious , previous )
  in
      if generations = 0 | generations = 1 then
          generations
      else
          computation ( generations - 2 , 1 , 0)
  end

  function puissance ( a : int , b : int ) : int =
    let
      var i := 0
      var resultat := 0
    in
      if b = 0 then
        1
      else
      (
        i := 1;
        resultat := a ;
        while i < b do
          (
          resultat := resultat * a ;
          i := i + 1
          );
          resultat
      )
    end



in
 print(coucou);
 entreeUtilisateur := read();
 printi(fibonacci(entreeUtilisateur));
 print(" ");

 tab[0] := puissance(2,1);
 tab[1] := puissance(2,2);
 tab[2] := puissance(2,3);
 printi(tab[0]);
 print(" ");
 printi(tab[1]);
 print(" ");
 printi(tab[2]);
 for i := 0 to 10 do
  (
  printi(i);
  print(" ");
  condition := i > 5;
  if condition
    then
      (
      print("Break");
      break
      )
  );
  if entreeUtilisateur > 5 | entreeUtilisateur = 3 & entreeUtilisateur = 6
    then
      v.y := v.x + v.z
    else
     v.x := v.x*2;
  print(" ");
  printi(v.x);
  print(" ");
  printi(v.y);
  print(" ");
  printi(v.z);
  print(" ");
  print(getchar());
  print(" ");
  printi(chr())


end
